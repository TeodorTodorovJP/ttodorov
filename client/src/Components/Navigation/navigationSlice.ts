import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import * as constants from "../../constants/constants";

// import { fetchCount } from './counterAPI';

export interface NavigationState {
  menuState: boolean;
  themeMenuState: boolean;

  theme: string;
  themes: constants.Themes;
  status: string;
  themeMenuOpts: "theme-menu-opts-show" | "theme-menu-opts-hide";
}

const initialState: NavigationState = {
  menuState: true,
  themeMenuState: true,
  theme: constants.defaultTheme,
  themes: {
    ...constants.themes,
  },
  status: constants.states.idle,
  themeMenuOpts: "theme-menu-opts-show",
};

export const navigationSlice = createSlice({
  name: "navigation",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeTheme: (state, action: PayloadAction<keyof constants.Themes>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.theme = action.payload;
    },
    toggleMenu: (state) => {
      state.menuState = !state.menuState;
    },
    toggleThemeMenu: (state) => {
      state.themeMenuState = !state.themeMenuState;
      state.themeMenuOpts =
        state.themeMenuOpts === "theme-menu-opts-show"
          ? "theme-menu-opts-hide"
          : "theme-menu-opts-show";
    },
    // dark: (state) => {
    //   // state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // sunSet: (state, action: PayloadAction<number>) => {
    //   // state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const { changeTheme, toggleMenu, toggleThemeMenu } =
  navigationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectState = (state: RootState) => state.navigation;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

export default navigationSlice.reducer;
